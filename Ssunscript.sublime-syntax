%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Ssunscript
file_extensions:
  - ss
first_line_match: "-[*]-( Mode:)? Ssunscript -[*]-"
scope: source.ss
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._^<>\[\]-]'
  screaming_identifier: '\b[A-Z_](?![a-z])[A-Z_0-9]+\b'

contexts:
  main:
    - include: global

  global:
    - include: comments
    - include: types
    - include: keywords
    - include: functions-and-declarations
    # - include: custom_styling
    - include: strings
    - include: string-escaped-char


  custom_styling:
    - match: \b({{screaming_identifier}})\b
      captures:
        1: storage.constant.jaiss
    - match: \b([A-Z][a-z0-9]+)([_A-Z][a-z0-9]*)*\b
      scope: storage.type.ss

  block-comment:
    - match: /\*
      scope: punctuation.definition.comment.ss
      push:
        - meta_scope: comment.block.ss
        - match: \*/
          scope: punctuation.definition.comment.ss
          pop: true
        - include: block-comment

  comments:
    - include: block-comment
    - match: //
      scope: punctuation.definition.comment.ss
      push:
        - meta_scope: comment.line.double-slash.ss
        - match: \n
          pop: true

  keywords:
    - match: \b(import|export|foreign)\b
      scope: keyword.control.ss
    - match: \b(if|else|for|while|defer|ref|return|remove|ifx|xx|is_constant|it|it_index|operator)\b
      scope: keyword.control.ss
    - match: \b(break|continue|case)\b
      scope: keyword.control.ss
    - match: \b(using|then|inline|no_inline)\b
      scope: keyword.control.ss
    - match: \b(context)\b
      scope: keyword.operator.ss
    - match: \b(push_allocator|push_context)\b
      scope: keyword.control.ss
    - match: \b(null|true|new|false)\b
      scope: constant.language.ss
    - match: '\b(\d(\d|_)*(.\d(\d|_)*)?)((e|E)(\+|-)?\d+)?[ijk]?\b'
      scope: constant.numeric.ss
    - match: '\b((0b(0|1|_)+)|(0o(\d|_)+)|(0d(\d|_)+)|(0[xX](\h|_)+))[ijk]?\b'
      scope: constant.numeric.ss
    - match: '---'
      scope: constant.numeric.ss
    - match: \b(Type|struct|class|proc|enum|enum_flags|union)\b
      scope: storage.type.ss
    - match: \b(cast|transmute)\b
      scope: keyword.function.ss
    - match: '@'
      scope: keyword.operator.ss
    - match: '([#@]\s*{{identifier}})'
      scope: keyword.tag.ss

  functions-and-declarations:
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*'
      captures:
        1: meta.function.ss entity.name.function.ss
        2: storage.type.ss
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*(inline|no_inline)\s+'
      captures:
        1: meta.function.ss entity.name.function.ss
        2: keyword.control.ss
        3: storage.type.ss
    - match: \b(size_of|align_of|offset_of|type_of|type_info)\b\s*\(
      captures:
        1: keyword.function.ss
    - match: ({{identifier}})\s*[!]?\s*[\(]
      captures:
        1: support.function.ss
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*(struct|union|enum|bit_field)'
      captures:
        1: meta.type.ss entity.name.type.ss
        2: storage.type.ss

  types:
    - match: '\b(struct|enum|union|bit_field)\b(?:(\{)(\}))?'
      captures:
        1: storage.type.ss
        2: meta.block.ss punctuation.definition.block.begin.ss
        3: meta.block.ss punctuation.definition.block.end.ss
    - match: (\[)(\d*)(\])(?=[[:alpha:]_])
      scope: meta.brackets.ss
      captures:
        1: punctuation.definition.brackets.begin.ss
        2: constant.numeric.ss
        3: punctuation.definition.brackets.end.ss
    - include: basic-types
    - match: '\$\s*({{identifier}})'
      scope: storage.type.ss

  basic-types:
    - match: '\b((s8|s16|s32|s64|int)|(u8|u16|u32|u64|uint)|(float32|float64|float)|bool|string|Any|void)\b'
      scope: storage.type.ss

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.ss
      push:
        - meta_scope: string.quoted.double.ss
        - match: '"'
          scope: punctuation.definition.string.end.ss
          pop: true
        - include: string-escaped-char
    - match: "'"
      scope: punctuation.definition.string.begin.ss
      push:
        - meta_scope: string.quoted.raw.ss
        - match: "'"
          scope: punctuation.definition.string.end.ss
          pop: true
        - include: string-escaped-char

  string-escaped-char:
    - match: '\\(\\|[abfnrutv0''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.ss
    - match: \\.
      scope: invalid.illegal.unknown-escape.ss
